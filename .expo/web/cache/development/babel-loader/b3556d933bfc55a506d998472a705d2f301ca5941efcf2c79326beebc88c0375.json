{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isBoolean, isFunction, isObject, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from \"./FirestoreDocumentChange\";\nimport FirestoreDocumentSnapshot from \"./FirestoreDocumentSnapshot\";\nimport FirestoreSnapshotMetadata from \"./FirestoreSnapshotMetadata\";\nvar FirestoreQuerySnapshot = function () {\n  function FirestoreQuerySnapshot(firestore, query, nativeData) {\n    _classCallCheck(this, FirestoreQuerySnapshot);\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map(function ($) {\n      return new FirestoreDocumentChange(firestore, $);\n    });\n    this._docs = nativeData.documents.map(function ($) {\n      return new FirestoreDocumentSnapshot(firestore, $);\n    });\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n  _createClass(FirestoreQuerySnapshot, [{\n    key: \"docs\",\n    get: function get() {\n      return this._docs;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._docs.length === 0;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this._query;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._docs.length;\n    }\n  }, {\n    key: \"docChanges\",\n    value: function docChanges(options) {\n      if (!isUndefined(options) && !isObject(options)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\");\n      }\n      var includeMetaDataChanges = false;\n      if (options) {\n        if (!isBoolean(options.includeMetadataChanges)) {\n          throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\");\n        }\n        includeMetaDataChanges = options.includeMetadataChanges;\n      }\n      if (this._source === 'get') {\n        return this._changes;\n      }\n      if (includeMetaDataChanges && this._excludesMetadataChanges) {\n        throw new Error('firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().');\n      }\n      return this._changes.filter(function ($) {\n        if (!includeMetaDataChanges) {\n          return $._isMetadataChange === false;\n        }\n        return true;\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      if (!isFunction(callback)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\");\n      }\n      var cb = thisArg ? callback.bind(thisArg) : callback;\n      for (var i = 0; i < this._docs.length; i++) {\n        cb(this._docs[i], i);\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuerySnapshot)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\");\n      }\n      if (this.empty !== other.empty || this.size !== other.size || !this.metadata.isEqual(other.metadata)) {\n        return false;\n      }\n      for (var i = 0; i < this.docs.length; i++) {\n        var thisDoc = this.docs[i];\n        var otherDoc = other.docs[i];\n        if (!thisDoc.isEqual(otherDoc)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n  return FirestoreQuerySnapshot;\n}();\nexport { FirestoreQuerySnapshot as default };","map":{"version":3,"names":["isBoolean","isFunction","isObject","isUndefined","FirestoreDocumentChange","FirestoreDocumentSnapshot","FirestoreSnapshotMetadata","FirestoreQuerySnapshot","firestore","query","nativeData","_classCallCheck","_query","_source","source","_excludesMetadataChanges","excludesMetadataChanges","_changes","changes","map","$","_docs","documents","_metadata","metadata","_createClass","key","get","length","value","docChanges","options","Error","includeMetaDataChanges","includeMetadataChanges","filter","_isMetadataChange","forEach","callback","thisArg","cb","bind","i","isEqual","other","empty","size","docs","thisDoc","otherDoc","default"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreQuerySnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isObject,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\n\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\",\n      );\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\n          \"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\",\n        );\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error(\n        'firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().',\n      );\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\",\n      );\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\",\n      );\n    }\n\n    // Simple checks first\n    if (\n      this.empty !== other.empty ||\n      this.size !== other.size ||\n      !this.metadata.isEqual(other.metadata)\n    ) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}