{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { isArray, isBoolean, isDate, isNull, isNumber, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from \"../FirestoreBlob\";\nimport { DOCUMENT_ID } from \"../FirestoreFieldPath\";\nimport FirestoreGeoPoint from \"../FirestoreGeoPoint\";\nimport FirestorePath from \"../FirestorePath\";\nimport FirestoreTimestamp from \"../FirestoreTimestamp\";\nimport { getTypeMapInt, getTypeMapName } from \"./typemap\";\nvar FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\nvar FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\nexport function buildNativeMap(data, ignoreUndefined) {\n  var nativeData = {};\n  if (data) {\n    var keys = Object.keys(data);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (typeof data[key] === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n      var typeMap = generateNativeData(data[key], ignoreUndefined);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n  return nativeData;\n}\nexport function buildNativeArray(array, ignoreUndefined) {\n  var nativeArray = [];\n  if (array) {\n    for (var i = 0; i < array.length; i++) {\n      var value = array[i];\n      if (typeof value === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n      var typeMap = generateNativeData(value, ignoreUndefined);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n  return nativeArray;\n}\nexport function generateNativeData(value, ignoreUndefined) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n    return getTypeMapInt('booleanFalse');\n  }\n  if (isNumber(value)) {\n    if (value === 0 && 1 / value === -Infinity) {\n      return getTypeMapInt('negativeZero');\n    }\n    if (Number.isSafeInteger(value)) {\n      return getTypeMapInt('integer', value);\n    }\n    return getTypeMapInt('double', value);\n  }\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n    return getTypeMapInt('string', value);\n  }\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value, ignoreUndefined));\n  }\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n    if (isDate(value)) {\n      var timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n    return getTypeMapInt('object', buildNativeMap(value, ignoreUndefined));\n  }\n  console.warn(\"Unknown data type received \" + value);\n  return getTypeMapInt('unknown');\n}\nexport function parseNativeMap(firestore, nativeData) {\n  var data;\n  if (nativeData) {\n    data = {};\n    var entries = Object.entries(nativeData);\n    for (var i = 0; i < entries.length; i++) {\n      var _entries$i = _slicedToArray(entries[i], 2),\n        key = _entries$i[0],\n        typeArray = _entries$i[1];\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n  return data;\n}\nexport function parseNativeArray(firestore, nativeArray) {\n  var array = [];\n  if (nativeArray) {\n    for (var i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n  return array;\n}\nexport function parseNativeData(firestore, nativeArray) {\n  var _nativeArray = _slicedToArray(nativeArray, 2),\n    int = _nativeArray[0],\n    value = _nativeArray[1];\n  var type = getTypeMapName(int);\n  switch (type) {\n    case 'nan':\n      return NaN;\n    case '-infinity':\n      return -Infinity;\n    case 'infinity':\n      return Infinity;\n    case 'null':\n      return null;\n    case 'booleanTrue':\n      return true;\n    case 'booleanFalse':\n      return false;\n    case 'double':\n    case 'integer':\n    case 'negativeZero':\n    case 'string':\n      return value;\n    case 'stringEmpty':\n      return '';\n    case 'array':\n      return parseNativeArray(firestore, value);\n    case 'object':\n      return parseNativeMap(firestore, value);\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n    default:\n      console.warn(\"Unknown data type received from native channel: \" + type);\n      return value;\n  }\n}","map":{"version":3,"names":["isArray","isBoolean","isDate","isNull","isNumber","isObject","isString","isUndefined","FirestoreBlob","DOCUMENT_ID","FirestoreGeoPoint","FirestorePath","FirestoreTimestamp","getTypeMapInt","getTypeMapName","FirestoreDocumentReference","provideDocumentReferenceClass","documentReference","FirestoreFieldValue","provideFieldValueClass","fieldValue","buildNativeMap","data","ignoreUndefined","nativeData","keys","Object","i","length","key","Error","typeMap","generateNativeData","buildNativeArray","array","nativeArray","value","push","Number","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","Infinity","isSafeInteger","path","latitude","longitude","timestamp","fromDate","seconds","nanoseconds","toBase64","_type","_elements","console","warn","parseNativeMap","firestore","entries","_entries$i","_slicedToArray","typeArray","parseNativeData","parseNativeArray","_nativeArray","int","type","NaN","fromName","fromBase64String"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/utils/serialize.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isArray,\n  isBoolean,\n  isDate,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from '../FirestoreBlob';\nimport { DOCUMENT_ID } from '../FirestoreFieldPath';\nimport FirestoreGeoPoint from '../FirestoreGeoPoint';\nimport FirestorePath from '../FirestorePath';\nimport FirestoreTimestamp from '../FirestoreTimestamp';\nimport { getTypeMapInt, getTypeMapName } from './typemap';\n\n// To avoid React Native require cycle warnings\nlet FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\n\nlet FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\n\n/**\n *\n * @param data\n * @param ignoreUndefined\n */\nexport function buildNativeMap(data, ignoreUndefined) {\n  const nativeData = {};\n  if (data) {\n    const keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (typeof data[key] === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n\n      const typeMap = generateNativeData(data[key], ignoreUndefined);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n  return nativeData;\n}\n\n/**\n *\n * @param array\n * @returns {Array}\n */\nexport function buildNativeArray(array, ignoreUndefined) {\n  const nativeArray = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      if (typeof value === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n      const typeMap = generateNativeData(value, ignoreUndefined);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n  return nativeArray;\n}\n\n/**\n * Creates a lightweight array of an object value to be sent over the bridge.\n * The type is convered to an integer which is handled on the native side\n * to create the correct types.\n *\n * Example: [7, 'some string'];\n *\n * @param value\n * @param ignoreUndefined\n * @returns {*}\n */\nexport function generateNativeData(value, ignoreUndefined) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    // mirror the JS SDK's integer detection algorithm\n    // https://github.com/firebase/firebase-js-sdk/blob/086df7c7e0299cedd9f3cff9080f46ca25cab7cd/packages/firestore/src/remote/number_serializer.ts#L56\n    if (value === 0 && 1 / value === -Infinity) {\n      return getTypeMapInt('negativeZero');\n    }\n    if (Number.isSafeInteger(value)) {\n      return getTypeMapInt('integer', value);\n    }\n    return getTypeMapInt('double', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value, ignoreUndefined));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    // Handle Date objects are Timestamps as per web sdk\n    if (isDate(value)) {\n      const timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value, ignoreUndefined));\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unknown data type received ${value}`);\n\n  return getTypeMapInt('unknown');\n}\n\n/**\n *\n * @param firestore\n * @param nativeData\n */\nexport function parseNativeMap(firestore, nativeData) {\n  let data;\n  if (nativeData) {\n    data = {};\n    const entries = Object.entries(nativeData);\n    for (let i = 0; i < entries.length; i++) {\n      const [key, typeArray] = entries[i];\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n  return data;\n}\n\n/**\n *\n * @param firestore\n * @param nativeArray\n * @returns {Array}\n */\nexport function parseNativeArray(firestore, nativeArray) {\n  const array = [];\n  if (nativeArray) {\n    for (let i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n  return array;\n}\n\n/**\n * Data returned from native is constructed in the same way it sent to keep\n * payloads over the bridge as small as possible. The index matches to a type\n * which is then created on JS land.\n *\n * Example: [7, 'string']\n *\n * @param firestore\n * @param nativeArray\n * @returns *\n */\nexport function parseNativeData(firestore, nativeArray) {\n  const [int, value] = nativeArray;\n  const type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n    case '-infinity':\n      return -Infinity;\n    case 'infinity':\n      return Infinity;\n    case 'null':\n      return null;\n    case 'booleanTrue':\n      return true;\n    case 'booleanFalse':\n      return false;\n    case 'double':\n    case 'integer':\n    case 'negativeZero':\n    case 'string':\n      return value;\n    case 'stringEmpty':\n      return '';\n    case 'array':\n      return parseNativeArray(firestore, value);\n    case 'object':\n      return parseNativeMap(firestore, value);\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`Unknown data type received from native channel: ${type}`);\n      return value;\n  }\n}\n"],"mappings":";AAiBA,SACEA,OAAO,EACPC,SAAS,EACTC,MAAM,EACNC,MAAM,EACNC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACRC,WAAW,QACN,uCAAuC;AAC9C,OAAOC,aAAa;AACpB,SAASC,WAAW;AACpB,OAAOC,iBAAiB;AACxB,OAAOC,aAAa;AACpB,OAAOC,kBAAkB;AACzB,SAASC,aAAa,EAAEC,cAAc;AAGtC,IAAIC,0BAA0B,GAAG,IAAI;AACrC,OAAO,SAASC,6BAA6BA,CAACC,iBAAiB,EAAE;EAC/DF,0BAA0B,GAAGE,iBAAiB;AAChD;AAEA,IAAIC,mBAAmB,GAAG,IAAI;AAC9B,OAAO,SAASC,sBAAsBA,CAACC,UAAU,EAAE;EACjDF,mBAAmB,GAAGE,UAAU;AAClC;AAOA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,eAAe,EAAE;EACpD,IAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIF,IAAI,EAAE;IACR,IAAMG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,IAAI,CAAC;IAC9B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAME,GAAG,GAAGJ,IAAI,CAACE,CAAC,CAAC;MAEnB,IAAI,OAAOL,IAAI,CAACO,GAAG,CAAC,KAAK,WAAW,EAAE;QACpC,IAAI,CAACN,eAAe,EAAE;UACpB,MAAM,IAAIO,KAAK,CAAC,oCAAoC,CAAC;QACvD,CAAC,MAAM;UACL;QACF;MACF;MAEA,IAAMC,OAAO,GAAGC,kBAAkB,CAACV,IAAI,CAACO,GAAG,CAAC,EAAEN,eAAe,CAAC;MAC9D,IAAIQ,OAAO,EAAE;QACXP,UAAU,CAACK,GAAG,CAAC,GAAGE,OAAO;MAC3B;IACF;EACF;EACA,OAAOP,UAAU;AACnB;AAOA,OAAO,SAASS,gBAAgBA,CAACC,KAAK,EAAEX,eAAe,EAAE;EACvD,IAAMY,WAAW,GAAG,EAAE;EACtB,IAAID,KAAK,EAAE;IACT,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,KAAK,CAACN,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAMS,KAAK,GAAGF,KAAK,CAACP,CAAC,CAAC;MACtB,IAAI,OAAOS,KAAK,KAAK,WAAW,EAAE;QAChC,IAAI,CAACb,eAAe,EAAE;UACpB,MAAM,IAAIO,KAAK,CAAC,oCAAoC,CAAC;QACvD,CAAC,MAAM;UACL;QACF;MACF;MACA,IAAMC,OAAO,GAAGC,kBAAkB,CAACI,KAAK,EAAEb,eAAe,CAAC;MAC1D,IAAIQ,OAAO,EAAE;QACXI,WAAW,CAACE,IAAI,CAACN,OAAO,CAAC;MAC3B;IACF;EACF;EACA,OAAOI,WAAW;AACpB;AAaA,OAAO,SAASH,kBAAkBA,CAACI,KAAK,EAAEb,eAAe,EAAE;EACzD,IAAIe,MAAM,CAACC,KAAK,CAACH,KAAK,CAAC,EAAE;IACvB,OAAOvB,aAAa,CAAC,KAAK,CAAC;EAC7B;EAEA,IAAIuB,KAAK,KAAKE,MAAM,CAACE,iBAAiB,EAAE;IACtC,OAAO3B,aAAa,CAAC,WAAW,CAAC;EACnC;EAEA,IAAIuB,KAAK,KAAKE,MAAM,CAACG,iBAAiB,EAAE;IACtC,OAAO5B,aAAa,CAAC,UAAU,CAAC;EAClC;EAEA,IAAIV,MAAM,CAACiC,KAAK,CAAC,IAAI7B,WAAW,CAAC6B,KAAK,CAAC,EAAE;IACvC,OAAOvB,aAAa,CAAC,MAAM,CAAC;EAC9B;EAEA,IAAIuB,KAAK,KAAK3B,WAAW,EAAE;IACzB,OAAOI,aAAa,CAAC,YAAY,CAAC;EACpC;EAEA,IAAIZ,SAAS,CAACmC,KAAK,CAAC,EAAE;IACpB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOvB,aAAa,CAAC,aAAa,CAAC;IACrC;IACA,OAAOA,aAAa,CAAC,cAAc,CAAC;EACtC;EAEA,IAAIT,QAAQ,CAACgC,KAAK,CAAC,EAAE;IAGnB,IAAIA,KAAK,KAAK,CAAC,IAAI,CAAC,GAAGA,KAAK,KAAK,CAACM,QAAQ,EAAE;MAC1C,OAAO7B,aAAa,CAAC,cAAc,CAAC;IACtC;IACA,IAAIyB,MAAM,CAACK,aAAa,CAACP,KAAK,CAAC,EAAE;MAC/B,OAAOvB,aAAa,CAAC,SAAS,EAAEuB,KAAK,CAAC;IACxC;IACA,OAAOvB,aAAa,CAAC,QAAQ,EAAEuB,KAAK,CAAC;EACvC;EAEA,IAAI9B,QAAQ,CAAC8B,KAAK,CAAC,EAAE;IACnB,IAAIA,KAAK,KAAK,EAAE,EAAE;MAChB,OAAOvB,aAAa,CAAC,aAAa,CAAC;IACrC;IACA,OAAOA,aAAa,CAAC,QAAQ,EAAEuB,KAAK,CAAC;EACvC;EAEA,IAAIpC,OAAO,CAACoC,KAAK,CAAC,EAAE;IAClB,OAAOvB,aAAa,CAAC,OAAO,EAAEoB,gBAAgB,CAACG,KAAK,EAAEb,eAAe,CAAC,CAAC;EACzE;EAEA,IAAIlB,QAAQ,CAAC+B,KAAK,CAAC,EAAE;IACnB,IAAIA,KAAK,YAAYrB,0BAA0B,EAAE;MAC/C,OAAOF,aAAa,CAAC,WAAW,EAAEuB,KAAK,CAACQ,IAAI,CAAC;IAC/C;IAEA,IAAIR,KAAK,YAAY1B,iBAAiB,EAAE;MACtC,OAAOG,aAAa,CAAC,UAAU,EAAE,CAACuB,KAAK,CAACS,QAAQ,EAAET,KAAK,CAACU,SAAS,CAAC,CAAC;IACrE;IAGA,IAAI5C,MAAM,CAACkC,KAAK,CAAC,EAAE;MACjB,IAAMW,SAAS,GAAGnC,kBAAkB,CAACoC,QAAQ,CAACZ,KAAK,CAAC;MACpD,OAAOvB,aAAa,CAAC,WAAW,EAAE,CAACkC,SAAS,CAACE,OAAO,EAAEF,SAAS,CAACG,WAAW,CAAC,CAAC;IAC/E;IAEA,IAAId,KAAK,YAAYxB,kBAAkB,EAAE;MACvC,OAAOC,aAAa,CAAC,WAAW,EAAE,CAACuB,KAAK,CAACa,OAAO,EAAEb,KAAK,CAACc,WAAW,CAAC,CAAC;IACvE;IAEA,IAAId,KAAK,YAAY5B,aAAa,EAAE;MAClC,OAAOK,aAAa,CAAC,MAAM,EAAEuB,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC;IAChD;IAEA,IAAIf,KAAK,YAAYlB,mBAAmB,EAAE;MACxC,OAAOL,aAAa,CAAC,YAAY,EAAE,CAACuB,KAAK,CAACgB,KAAK,EAAEhB,KAAK,CAACiB,SAAS,CAAC,CAAC;IACpE;IAEA,OAAOxC,aAAa,CAAC,QAAQ,EAAEQ,cAAc,CAACe,KAAK,EAAEb,eAAe,CAAC,CAAC;EACxE;EAGA+B,OAAO,CAACC,IAAI,iCAA+BnB,KAAO,CAAC;EAEnD,OAAOvB,aAAa,CAAC,SAAS,CAAC;AACjC;AAOA,OAAO,SAAS2C,cAAcA,CAACC,SAAS,EAAEjC,UAAU,EAAE;EACpD,IAAIF,IAAI;EACR,IAAIE,UAAU,EAAE;IACdF,IAAI,GAAG,CAAC,CAAC;IACT,IAAMoC,OAAO,GAAGhC,MAAM,CAACgC,OAAO,CAAClC,UAAU,CAAC;IAC1C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,OAAO,CAAC9B,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,IAAAgC,UAAA,GAAAC,cAAA,CAAyBF,OAAO,CAAC/B,CAAC,CAAC;QAA5BE,GAAG,GAAA8B,UAAA;QAAEE,SAAS,GAAAF,UAAA;MACrBrC,IAAI,CAACO,GAAG,CAAC,GAAGiC,eAAe,CAACL,SAAS,EAAEI,SAAS,CAAC;IACnD;EACF;EACA,OAAOvC,IAAI;AACb;AAQA,OAAO,SAASyC,gBAAgBA,CAACN,SAAS,EAAEtB,WAAW,EAAE;EACvD,IAAMD,KAAK,GAAG,EAAE;EAChB,IAAIC,WAAW,EAAE;IACf,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,WAAW,CAACP,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3CO,KAAK,CAACG,IAAI,CAACyB,eAAe,CAACL,SAAS,EAAEtB,WAAW,CAACR,CAAC,CAAC,CAAC,CAAC;IACxD;EACF;EACA,OAAOO,KAAK;AACd;AAaA,OAAO,SAAS4B,eAAeA,CAACL,SAAS,EAAEtB,WAAW,EAAE;EACtD,IAAA6B,YAAA,GAAAJ,cAAA,CAAqBzB,WAAW;IAAzB8B,GAAG,GAAAD,YAAA;IAAE5B,KAAK,GAAA4B,YAAA;EACjB,IAAME,IAAI,GAAGpD,cAAc,CAACmD,GAAG,CAAC;EAEhC,QAAQC,IAAI;IACV,KAAK,KAAK;MACR,OAAOC,GAAG;IACZ,KAAK,WAAW;MACd,OAAO,CAACzB,QAAQ;IAClB,KAAK,UAAU;MACb,OAAOA,QAAQ;IACjB,KAAK,MAAM;MACT,OAAO,IAAI;IACb,KAAK,aAAa;MAChB,OAAO,IAAI;IACb,KAAK,cAAc;MACjB,OAAO,KAAK;IACd,KAAK,QAAQ;IACb,KAAK,SAAS;IACd,KAAK,cAAc;IACnB,KAAK,QAAQ;MACX,OAAON,KAAK;IACd,KAAK,aAAa;MAChB,OAAO,EAAE;IACX,KAAK,OAAO;MACV,OAAO2B,gBAAgB,CAACN,SAAS,EAAErB,KAAK,CAAC;IAC3C,KAAK,QAAQ;MACX,OAAOoB,cAAc,CAACC,SAAS,EAAErB,KAAK,CAAC;IACzC,KAAK,WAAW;MACd,OAAO,IAAIrB,0BAA0B,CAAC0C,SAAS,EAAE9C,aAAa,CAACyD,QAAQ,CAAChC,KAAK,CAAC,CAAC;IACjF,KAAK,UAAU;MACb,OAAO,IAAI1B,iBAAiB,CAAC0B,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAClD,KAAK,WAAW;MACd,OAAO,IAAIxB,kBAAkB,CAACwB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IACnD,KAAK,MAAM;MACT,OAAO5B,aAAa,CAAC6D,gBAAgB,CAACjC,KAAK,CAAC;IAC9C;MAEEkB,OAAO,CAACC,IAAI,sDAAoDW,IAAM,CAAC;MACvE,OAAO9B,KAAK;EAChB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}