{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isArray, isNull, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport { FirestoreAggregateQuery } from \"./FirestoreAggregate\";\nimport FirestoreDocumentSnapshot from \"./FirestoreDocumentSnapshot\";\nimport FirestoreFieldPath, { fromDotSeparatedString } from \"./FirestoreFieldPath\";\nimport FirestoreQuerySnapshot from \"./FirestoreQuerySnapshot\";\nimport { parseSnapshotArgs } from \"./utils\";\nimport { _Filter, generateFilters } from \"./FirestoreFilter\";\nvar _id = 0;\nvar FirestoreQuery = function () {\n  function FirestoreQuery(firestore, collectionPath, modifiers, queryName) {\n    _classCallCheck(this, FirestoreQuery);\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n  _createClass(FirestoreQuery, [{\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }, {\n    key: \"_handleQueryCursor\",\n    value: function _handleQueryCursor(cursor, docOrField, fields) {\n      var modifiers = this._modifiers._copy();\n      if (isUndefined(docOrField)) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Expected a DocumentSnapshot or list of field values but got undefined.\");\n      }\n      if (docOrField instanceof FirestoreDocumentSnapshot) {\n        if (fields.length > 0) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.\");\n        }\n        var documentSnapshot = docOrField;\n        if (!documentSnapshot.exists) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Can't use a DocumentSnapshot that doesn't exist.\");\n        }\n        var currentOrders = modifiers.orders;\n        var values = [];\n        for (var i = 0; i < currentOrders.length; i++) {\n          var order = currentOrders[i];\n          if (order.fieldPath === '__name__') {\n            continue;\n          }\n          var value = documentSnapshot.get(order.fieldPath);\n          if (value === undefined) {\n            throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) You are trying to start or end a query using a document for which the field '\" + order.fieldPath + \"' (used as the orderBy) does not exist.\");\n          }\n          values.push(value);\n        }\n        if (modifiers._orders.length) {\n          var lastOrder = modifiers._orders[modifiers._orders.length - 1];\n          if (lastOrder.fieldPath !== '__name__') {\n            modifiers._orders.push({\n              fieldPath: '__name__',\n              direction: lastOrder.direction\n            });\n          }\n        } else {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: 'ASCENDING'\n          });\n        }\n        if (this._modifiers.isCollectionGroupQuery()) {\n          values.push(documentSnapshot.ref.path);\n        } else {\n          values.push(documentSnapshot.id);\n        }\n        return modifiers.setFieldsCursor(cursor, values);\n      }\n      var allFields = [docOrField].concat(fields);\n      if (allFields.length > modifiers.orders.length) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.\");\n      }\n      return modifiers.setFieldsCursor(cursor, allFields);\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      return new FirestoreAggregateQuery(this._firestore, this, this._collectionPath, this._modifiers);\n    }\n  }, {\n    key: \"countFromServer\",\n    value: function countFromServer() {\n      return this.count();\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(docOrField) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"endBefore\",\n    value: function endBefore(docOrField) {\n      for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        fields[_key2 - 1] = arguments[_key2];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endBefore', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n      if (!isUndefined(options) && !isObject(options)) {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' must be an object is provided.\");\n      }\n      if (options && options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\");\n      }\n      if (!isUndefined(this._queryName)) {\n        return this._firestore.native.namedQueryGet(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n          return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n        });\n      }\n      this._modifiers.validatelimitToLast();\n      return this._firestore.native.collectionGet(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n        return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuery)) {\n        throw new Error(\"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\");\n      }\n      if (this.firestore.app.name !== other.firestore.app.name || this._modifiers.type !== other._modifiers.type || this._modifiers.filters.length !== other._modifiers.filters.length || this._modifiers.orders.length !== other._modifiers.orders.length || this._collectionPath.relativeName !== other._collectionPath.relativeName || Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length) {\n        return false;\n      }\n      if (JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) || JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) || JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      if (this._modifiers.isValidLimit(_limit)) {\n        throw new Error(\"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\");\n      }\n      var modifiers = this._modifiers._copy().limit(_limit);\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(_limitToLast) {\n      if (this._modifiers.isValidLimitToLast(_limitToLast)) {\n        throw new Error(\"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\");\n      }\n      var modifiers = this._modifiers._copy().limitToLast(_limitToLast);\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this2 = this;\n      var snapshotListenOptions;\n      var callback;\n      var onNext;\n      var onError;\n      this._modifiers.validatelimitToLast();\n      try {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        var options = parseSnapshotArgs(args);\n        snapshotListenOptions = options.snapshotListenOptions;\n        callback = options.callback;\n        onNext = options.onNext;\n        onError = options.onError;\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().onSnapshot(*) \" + e.message);\n      }\n      function handleSuccess(querySnapshot) {\n        callback(querySnapshot, null);\n        onNext(querySnapshot);\n      }\n      function handleError(error) {\n        callback(null, error);\n        onError(error);\n      }\n      var listenerId = _id++;\n      var onSnapshotSubscription = this._firestore.emitter.addListener(this._firestore.eventNameForApp(\"firestore_collection_sync_event:\" + listenerId), function (event) {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          var querySnapshot = new FirestoreQuerySnapshot(_this2._firestore, _this2, event.body.snapshot);\n          handleSuccess(querySnapshot);\n        }\n      });\n      var unsubscribe = function unsubscribe() {\n        onSnapshotSubscription.remove();\n        _this2._firestore.native.collectionOffSnapshot(listenerId);\n      };\n      if (!isUndefined(this._queryName)) {\n        this._firestore.native.namedQueryOnSnapshot(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      } else {\n        this._firestore.native.collectionOnSnapshot(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      }\n      return unsubscribe;\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\");\n      }\n      var path;\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n      if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\");\n      }\n      if (this._modifiers.hasStart()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().');\n      }\n      if (this._modifiers.hasEnd()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().');\n      }\n      var modifiers = this._modifiers._copy().orderBy(path, directionStr);\n      try {\n        modifiers.validateOrderBy();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().orderBy() \" + e.message);\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"startAfter\",\n    value: function startAfter(docOrField) {\n      for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        fields[_key4 - 1] = arguments[_key4];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAfter', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(docOrField) {\n      for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        fields[_key5 - 1] = arguments[_key5];\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPathOrFilter, opStr, value) {\n      if (!isString(fieldPathOrFilter) && !(fieldPathOrFilter instanceof FirestoreFieldPath) && !(fieldPathOrFilter instanceof _Filter)) {\n        throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' must be a string, instance of FieldPath or instance of Filter.\");\n      }\n      var modifiers;\n      if (fieldPathOrFilter instanceof _Filter && fieldPathOrFilter.queries) {\n        var filters = generateFilters(fieldPathOrFilter, this._modifiers);\n        modifiers = this._modifiers._copy().filterWhere(filters);\n      } else {\n        if (fieldPathOrFilter instanceof _Filter) {\n          opStr = fieldPathOrFilter.operator;\n          value = fieldPathOrFilter.value;\n          fieldPathOrFilter = fieldPathOrFilter.fieldPath;\n        }\n        var path;\n        if (isString(fieldPathOrFilter)) {\n          try {\n            path = fromDotSeparatedString(fieldPathOrFilter);\n          } catch (e) {\n            throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' \" + e.message + \".\");\n          }\n        } else {\n          path = fieldPathOrFilter;\n        }\n        if (!this._modifiers.isValidOperator(opStr)) {\n          throw new Error(\"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\");\n        }\n        if (isUndefined(value)) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\");\n        }\n        if (isNull(value) && !this._modifiers.isEqualOperator(opStr) && !this._modifiers.isNotEqualOperator(opStr)) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\");\n        }\n        if (this._modifiers.isInOperator(opStr)) {\n          if (!isArray(value) || !value.length) {\n            throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '\" + opStr + \"' filters.\");\n          }\n          if (value.length > 10) {\n            throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. '\" + opStr + \"' filters support a maximum of 10 elements in the value array.\");\n          }\n        }\n        modifiers = this._modifiers._copy().where(path, opStr, value);\n      }\n      try {\n        modifiers.validateWhere();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().where() \" + e.message);\n      }\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }]);\n  return FirestoreQuery;\n}();\nexport { FirestoreQuery as default };","map":{"version":3,"names":["isArray","isNull","isObject","isString","isUndefined","NativeError","FirestoreAggregateQuery","FirestoreDocumentSnapshot","FirestoreFieldPath","fromDotSeparatedString","FirestoreQuerySnapshot","parseSnapshotArgs","_Filter","generateFilters","_id","FirestoreQuery","firestore","collectionPath","modifiers","queryName","_classCallCheck","_firestore","_collectionPath","_modifiers","_queryName","_createClass","key","get","value","_handleQueryCursor","cursor","docOrField","fields","_copy","Error","length","documentSnapshot","exists","currentOrders","orders","values","i","order","fieldPath","undefined","push","_orders","lastOrder","direction","isCollectionGroupQuery","ref","path","id","setFieldsCursor","allFields","concat","count","countFromServer","endAt","_len","arguments","Array","_key","endBefore","_len2","_key2","options","_this","source","native","namedQueryGet","type","filters","then","data","validatelimitToLast","collectionGet","relativeName","isEqual","other","app","name","Object","keys","JSON","stringify","limit","isValidLimit","limitToLast","isValidLimitToLast","onSnapshot","_this2","snapshotListenOptions","callback","onNext","onError","_len3","args","_key3","e","message","handleSuccess","querySnapshot","handleError","error","listenerId","onSnapshotSubscription","emitter","addListener","eventNameForApp","event","body","fromEvent","snapshot","unsubscribe","remove","collectionOffSnapshot","namedQueryOnSnapshot","collectionOnSnapshot","orderBy","directionStr","isValidDirection","hasStart","hasEnd","validateOrderBy","startAfter","_len4","_key4","startAt","_len5","_key5","where","fieldPathOrFilter","opStr","queries","filterWhere","operator","isValidOperator","isEqualOperator","isNotEqualOperator","isInOperator","validateWhere","default"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreQuery.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isArray,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport { FirestoreAggregateQuery } from './FirestoreAggregate';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestoreQuerySnapshot from './FirestoreQuerySnapshot';\nimport { parseSnapshotArgs } from './utils';\nimport { _Filter, generateFilters } from './FirestoreFilter';\n\nlet _id = 0;\n\nexport default class FirestoreQuery {\n  constructor(firestore, collectionPath, modifiers, queryName) {\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  _handleQueryCursor(cursor, docOrField, fields) {\n    const modifiers = this._modifiers._copy();\n\n    if (isUndefined(docOrField)) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Expected a DocumentSnapshot or list of field values but got undefined.`,\n      );\n    }\n\n    // Handles cases where the first arg is a DocumentSnapshot\n    if (docOrField instanceof FirestoreDocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.`,\n        );\n      }\n\n      const documentSnapshot = docOrField;\n\n      if (!documentSnapshot.exists) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Can't use a DocumentSnapshot that doesn't exist.`,\n        );\n      }\n\n      const currentOrders = modifiers.orders;\n\n      const values = [];\n\n      for (let i = 0; i < currentOrders.length; i++) {\n        const order = currentOrders[i];\n        //skip if fieldPath is '__name__'\n        if (order.fieldPath === '__name__') {\n          continue;\n        }\n\n        const value = documentSnapshot.get(order.fieldPath);\n\n        if (value === undefined) {\n          throw new Error(\n            `firebase.firestore().collection().${cursor}(*) You are trying to start or end a query using a document for which the field '${order.fieldPath}' (used as the orderBy) does not exist.`,\n          );\n        }\n\n        values.push(value);\n      }\n\n      // Based on https://github.com/invertase/react-native-firebase/issues/2854#issuecomment-552986650\n      if (modifiers._orders.length) {\n        const lastOrder = modifiers._orders[modifiers._orders.length - 1];\n        //push '__name__' field only if not present already\n        if (lastOrder.fieldPath !== '__name__') {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: lastOrder.direction,\n          });\n        }\n      } else {\n        modifiers._orders.push({\n          fieldPath: '__name__',\n          direction: 'ASCENDING',\n        });\n      }\n\n      if (this._modifiers.isCollectionGroupQuery()) {\n        values.push(documentSnapshot.ref.path);\n      } else {\n        values.push(documentSnapshot.id);\n      }\n\n      return modifiers.setFieldsCursor(cursor, values);\n    }\n\n    /**\n     * Assumes list of field values to query by. Orders must be of equal length.\n     */\n\n    const allFields = [docOrField].concat(fields);\n\n    if (allFields.length > modifiers.orders.length) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.`,\n      );\n    }\n\n    return modifiers.setFieldsCursor(cursor, allFields);\n  }\n\n  count() {\n    return new FirestoreAggregateQuery(\n      this._firestore,\n      this,\n      this._collectionPath,\n      this._modifiers,\n    );\n  }\n\n  countFromServer() {\n    return this.count();\n  }\n\n  endAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  endBefore(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endBefore', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' must be an object is provided.\",\n      );\n    }\n\n    if (\n      options &&\n      options.source &&\n      options.source !== 'default' &&\n      options.source !== 'server' &&\n      options.source !== 'cache'\n    ) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\",\n      );\n    }\n\n    if (!isUndefined(this._queryName)) {\n      return this._firestore.native\n        .namedQueryGet(\n          this._queryName,\n          this._modifiers.type,\n          this._modifiers.filters,\n          this._modifiers.orders,\n          this._modifiers.options,\n          options,\n        )\n        .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n    }\n\n    this._modifiers.validatelimitToLast();\n\n    return this._firestore.native\n      .collectionGet(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        options,\n      )\n      .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuery)) {\n      throw new Error(\n        \"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\",\n      );\n    }\n\n    // Carry out lightweight checks first\n    if (\n      this.firestore.app.name !== other.firestore.app.name ||\n      this._modifiers.type !== other._modifiers.type ||\n      this._modifiers.filters.length !== other._modifiers.filters.length ||\n      this._modifiers.orders.length !== other._modifiers.orders.length ||\n      this._collectionPath.relativeName !== other._collectionPath.relativeName ||\n      Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length\n    ) {\n      return false;\n    }\n\n    // Carry out potentially expensive checks\n    // noinspection RedundantIfStatementJS\n    if (\n      JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) ||\n      JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) ||\n      JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  limit(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limit(limit);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  limitToLast(limitToLast) {\n    if (this._modifiers.isValidLimitToLast(limitToLast)) {\n      throw new Error(\n        \"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limitToLast(limitToLast);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  onSnapshot(...args) {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    this._modifiers.validatelimitToLast();\n\n    try {\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(querySnapshot) {\n      callback(querySnapshot, null);\n      onNext(querySnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp(`firestore_collection_sync_event:${listenerId}`),\n      event => {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          const querySnapshot = new FirestoreQuerySnapshot(\n            this._firestore,\n            this,\n            event.body.snapshot,\n          );\n          handleSuccess(querySnapshot);\n        }\n      },\n    );\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n      this._firestore.native.collectionOffSnapshot(listenerId);\n    };\n\n    if (!isUndefined(this._queryName)) {\n      this._firestore.native.namedQueryOnSnapshot(\n        this._queryName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    } else {\n      this._firestore.native.collectionOnSnapshot(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    }\n\n    return unsubscribe;\n  }\n\n  orderBy(fieldPath, directionStr) {\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore().collection().orderBy(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      path = fieldPath;\n    }\n\n    if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\",\n      );\n    }\n\n    if (this._modifiers.hasStart()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().',\n      );\n    }\n\n    if (this._modifiers.hasEnd()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderBy(path, directionStr);\n\n    try {\n      modifiers.validateOrderBy();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().orderBy() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  startAfter(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAfter', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  startAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  where(fieldPathOrFilter, opStr, value) {\n    if (\n      !isString(fieldPathOrFilter) &&\n      !(fieldPathOrFilter instanceof FirestoreFieldPath) &&\n      !(fieldPathOrFilter instanceof _Filter)\n    ) {\n      throw new Error(\n        \"firebase.firestore().collection().where(*) 'fieldPath' must be a string, instance of FieldPath or instance of Filter.\",\n      );\n    }\n\n    let modifiers;\n    if (fieldPathOrFilter instanceof _Filter && fieldPathOrFilter.queries) {\n      //AND or OR filter\n      const filters = generateFilters(fieldPathOrFilter, this._modifiers);\n      modifiers = this._modifiers._copy().filterWhere(filters);\n    } else {\n      if (fieldPathOrFilter instanceof _Filter) {\n        // Standard Filter. Usual path.\n        opStr = fieldPathOrFilter.operator;\n        value = fieldPathOrFilter.value;\n        fieldPathOrFilter = fieldPathOrFilter.fieldPath;\n      }\n      let path;\n\n      if (isString(fieldPathOrFilter)) {\n        try {\n          path = fromDotSeparatedString(fieldPathOrFilter);\n        } catch (e) {\n          throw new Error(`firebase.firestore().collection().where(*) 'fieldPath' ${e.message}.`);\n        }\n      } else {\n        path = fieldPathOrFilter;\n      }\n\n      if (!this._modifiers.isValidOperator(opStr)) {\n        throw new Error(\n          \"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\",\n        );\n      }\n\n      if (isUndefined(value)) {\n        throw new Error(\n          \"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\",\n        );\n      }\n\n      if (\n        isNull(value) &&\n        !this._modifiers.isEqualOperator(opStr) &&\n        !this._modifiers.isNotEqualOperator(opStr)\n      ) {\n        throw new Error(\n          \"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\",\n        );\n      }\n\n      if (this._modifiers.isInOperator(opStr)) {\n        if (!isArray(value) || !value.length) {\n          throw new Error(\n            `firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '${opStr}' filters.`,\n          );\n        }\n\n        if (value.length > 10) {\n          throw new Error(\n            `firebase.firestore().collection().where(_, _, *) 'value' is invalid. '${opStr}' filters support a maximum of 10 elements in the value array.`,\n          );\n        }\n      }\n\n      modifiers = this._modifiers._copy().where(path, opStr, value);\n    }\n\n    try {\n      modifiers.validateWhere();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().where() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}