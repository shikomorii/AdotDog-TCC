{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { isNumber } from '@react-native-firebase/app/lib/common';\nimport FirestoreFieldPath, { DOCUMENT_ID } from \"./FirestoreFieldPath\";\nimport { buildNativeArray, generateNativeData } from \"./utils/serialize\";\nexport var OPERATORS = {\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '!=': 'NOT_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY',\n  'not-in': 'NOT_IN',\n  in: 'IN'\n};\nvar INEQUALITY = {\n  LESS_THAN: true,\n  LESS_THAN_OR_EQUAL: true,\n  GREATER_THAN: true,\n  GREATER_THAN_OR_EQUAL: true,\n  NOT_EQUAL: true\n};\nvar DIRECTIONS = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING'\n};\nvar FirestoreQueryModifiers = function () {\n  function FirestoreQueryModifiers() {\n    _classCallCheck(this, FirestoreQueryModifiers);\n    this._limit = undefined;\n    this._limitToLast = undefined;\n    this._filters = [];\n    this._orders = [];\n    this._type = 'collection';\n    this._startAt = undefined;\n    this._startAfter = undefined;\n    this._endAt = undefined;\n    this._endBefore = undefined;\n    this.hasInequality = false;\n    this.hasNotEqual = false;\n    this.hasArrayContains = false;\n    this.hasArrayContainsAny = false;\n    this.hasIn = false;\n    this.hasNotIn = false;\n  }\n  _createClass(FirestoreQueryModifiers, [{\n    key: \"_copy\",\n    value: function _copy() {\n      var newInstance = new FirestoreQueryModifiers();\n      newInstance._limit = this._limit;\n      newInstance._limitToLast = this._limitToLast;\n      newInstance._filters = _toConsumableArray(this._filters);\n      newInstance._orders = _toConsumableArray(this._orders);\n      newInstance._type = this._type;\n      newInstance._startAt = this._startAt;\n      newInstance._startAfter = this._startAfter;\n      newInstance._endAt = this._endAt;\n      newInstance._endBefore = this._endBefore;\n      return newInstance;\n    }\n  }, {\n    key: \"filters\",\n    get: function get() {\n      return this._filters.map(function (f) {\n        return _objectSpread(_objectSpread({}, f), {}, {\n          fieldPath: f.fieldPath instanceof FirestoreFieldPath ? f.fieldPath._toArray() : f.fieldPath\n        });\n      });\n    }\n  }, {\n    key: \"orders\",\n    get: function get() {\n      return this._orders.map(function (f) {\n        return _objectSpread(_objectSpread({}, f), {}, {\n          fieldPath: f.fieldPath instanceof FirestoreFieldPath ? f.fieldPath._toArray() : f.fieldPath\n        });\n      });\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      var options = {};\n      if (this._limit) {\n        options.limit = this._limit;\n      }\n      if (this._limitToLast) {\n        options.limitToLast = this._limitToLast;\n      }\n      if (this._startAt) {\n        options.startAt = this._startAt;\n      }\n      if (this._startAfter) {\n        options.startAfter = this._startAfter;\n      }\n      if (this._endAt) {\n        options.endAt = this._endAt;\n      }\n      if (this._endBefore) {\n        options.endBefore = this._endBefore;\n      }\n      return options;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"setFieldsCursor\",\n    value: function setFieldsCursor(cursor, fields) {\n      this[\"_\" + cursor] = buildNativeArray(fields);\n      return this;\n    }\n  }, {\n    key: \"hasStart\",\n    value: function hasStart() {\n      return !!(this._startAt || this._startAfter);\n    }\n  }, {\n    key: \"hasEnd\",\n    value: function hasEnd() {\n      return !!(this._endAt || this._endBefore);\n    }\n  }, {\n    key: \"asCollectionGroupQuery\",\n    value: function asCollectionGroupQuery() {\n      this._type = 'collectionGroup';\n      return this;\n    }\n  }, {\n    key: \"isCollectionGroupQuery\",\n    value: function isCollectionGroupQuery() {\n      return this._type === 'collectionGroup';\n    }\n  }, {\n    key: \"isValidLimit\",\n    value: function isValidLimit(limit) {\n      return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      this._limitToLast = undefined;\n      this._limit = _limit;\n      return this;\n    }\n  }, {\n    key: \"isValidLimitToLast\",\n    value: function isValidLimitToLast(limit) {\n      return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n    }\n  }, {\n    key: \"validatelimitToLast\",\n    value: function validatelimitToLast() {\n      if (this._limitToLast) {\n        if (!this._orders.length) {\n          throw new Error('firebase.firestore().collection().limitToLast() queries require specifying at least one firebase.firestore().collection().orderBy() clause');\n        }\n      }\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(_limitToLast) {\n      this._limit = undefined;\n      this._limitToLast = _limitToLast;\n      return this;\n    }\n  }, {\n    key: \"isValidOperator\",\n    value: function isValidOperator(operator) {\n      return !!OPERATORS[operator];\n    }\n  }, {\n    key: \"isEqualOperator\",\n    value: function isEqualOperator(operator) {\n      return OPERATORS[operator] === 'EQUAL';\n    }\n  }, {\n    key: \"isNotEqualOperator\",\n    value: function isNotEqualOperator(operator) {\n      return OPERATORS[operator] === 'NOT_EQUAL';\n    }\n  }, {\n    key: \"isInOperator\",\n    value: function isInOperator(operator) {\n      return OPERATORS[operator] === 'IN' || OPERATORS[operator] === 'ARRAY_CONTAINS_ANY' || OPERATORS[operator] === 'NOT_IN';\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      var filter = {\n        fieldPath: fieldPath,\n        operator: OPERATORS[opStr],\n        value: generateNativeData(value, true)\n      };\n      this._filters = this._filters.concat(filter);\n      return this;\n    }\n  }, {\n    key: \"filterWhere\",\n    value: function filterWhere(filter) {\n      this._filters = this._filters.concat(filter);\n      return this;\n    }\n  }, {\n    key: \"validateWhere\",\n    value: function validateWhere() {\n      if (this._filters.length > 0) {\n        this._filterCheck(this._filters);\n      }\n    }\n  }, {\n    key: \"_filterCheck\",\n    value: function _filterCheck(filters) {\n      for (var i = 0; i < filters.length; i++) {\n        var filter = filters[i];\n        if (filter.queries) {\n          this._filterCheck(filter.queries);\n          continue;\n        }\n        if (!INEQUALITY[filter.operator]) {\n          continue;\n        }\n        if (filter.operator === OPERATORS['!=']) {\n          if (this.hasNotEqual) {\n            throw new Error(\"Invalid query. You cannot use more than one '!=' inequality filter.\");\n          }\n          this.hasNotEqual = true;\n        }\n        if (!this.hasInequality) {\n          this.hasInequality = filter;\n          continue;\n        }\n        if (INEQUALITY[filter.operator] && this.hasInequality) {\n          if (this.hasInequality.fieldPath._toPath() !== filter.fieldPath._toPath()) {\n            throw new Error(\"Invalid query. All where filters with an inequality (<, <=, >, != or >=) must be on the same field. But you have inequality filters on '\" + this.hasInequality.fieldPath._toPath() + \"' and '\" + filter.fieldPath._toPath() + \"'\");\n          }\n        }\n      }\n      for (var _i = 0; _i < filters.length; _i++) {\n        var _filter = filters[_i];\n        if (_filter.operator === OPERATORS['array-contains']) {\n          if (this.hasArrayContains) {\n            throw new Error('Invalid query. Queries only support a single array-contains filter.');\n          }\n          this.hasArrayContains = true;\n        }\n        if (_filter.operator === OPERATORS['array-contains-any']) {\n          if (this.hasArrayContainsAny) {\n            throw new Error(\"Invalid query. You cannot use more than one 'array-contains-any' filter.\");\n          }\n          if (this.hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use 'array-contains-any' filters with 'not-in' filters.\");\n          }\n          this.hasArrayContainsAny = true;\n        }\n        if (_filter.operator === OPERATORS.in) {\n          if (this.hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use 'in' filters with 'not-in' filters.\");\n          }\n          this.hasIn = true;\n        }\n        if (_filter.operator === OPERATORS['not-in']) {\n          if (this.hasNotIn) {\n            throw new Error(\"Invalid query. You cannot use more than one 'not-in' filter.\");\n          }\n          if (this.hasNotEqual) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with '!=' inequality filters\");\n          }\n          if (this.hasIn) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'in' filters.\");\n          }\n          if (this.hasArrayContainsAny) {\n            throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'array-contains-any' filters.\");\n          }\n          this.hasNotIn = true;\n        }\n      }\n    }\n  }, {\n    key: \"isValidDirection\",\n    value: function isValidDirection(directionStr) {\n      return !!DIRECTIONS[directionStr.toLowerCase()];\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      var order = {\n        fieldPath: fieldPath,\n        direction: directionStr ? DIRECTIONS[directionStr.toLowerCase()] : DIRECTIONS.asc\n      };\n      this._orders = this._orders.concat(order);\n      return this;\n    }\n  }, {\n    key: \"validateOrderBy\",\n    value: function validateOrderBy() {\n      this._validateOrderByCheck(this._filters);\n    }\n  }, {\n    key: \"_validateOrderByCheck\",\n    value: function _validateOrderByCheck(filters) {\n      if (this._orders.length > 1) {\n        var orders = this._orders.map(function ($) {\n          return $.fieldPath._toPath();\n        });\n        var set = new Set(orders);\n        if (set.size !== orders.length) {\n          throw new Error('Invalid query. Order by clause cannot contain duplicate fields.');\n        }\n      }\n      if (filters.length === 0) {\n        return;\n      }\n      for (var i = 0; i < filters.length; i++) {\n        var filter = filters[i];\n        if (filter.queries) {\n          this._validateOrderByCheck(filter.queries);\n          continue;\n        }\n        var filterFieldPath = filter.fieldPath._toPath();\n        for (var k = 0; k < this._orders.length; k++) {\n          var order = this._orders[k];\n          var orderFieldPath = order.fieldPath;\n          if (filter.operator === OPERATORS['==']) {\n            if (filterFieldPath === orderFieldPath._toPath()) {\n              throw new Error(\"Invalid query. Query.orderBy() parameter: \" + orderFieldPath + \" cannot be the same as your Query.where() fieldPath parameter: \" + filterFieldPath);\n            }\n          }\n          if (filterFieldPath === DOCUMENT_ID._toPath() && orderFieldPath !== DOCUMENT_ID._toPath()) {\n            throw new Error(\"Invalid query. Query.where() fieldPath parameter: 'FirestoreFieldPath' cannot be used in conjunction with a different Query.orderBy() parameter\");\n          }\n          if (INEQUALITY[filter.operator]) {\n            if (filterFieldPath !== this._orders[0].fieldPath._toPath()) {\n              throw new Error(\"Invalid query. Initial Query.orderBy() parameter: \" + orderFieldPath + \" has to be the same as the Query.where() fieldPath parameter(s): \" + filterFieldPath + \" when an inequality operator is invoked \");\n            }\n          }\n        }\n      }\n    }\n  }]);\n  return FirestoreQueryModifiers;\n}();\nexport { FirestoreQueryModifiers as default };","map":{"version":3,"names":["isNumber","FirestoreFieldPath","DOCUMENT_ID","buildNativeArray","generateNativeData","OPERATORS","in","INEQUALITY","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","NOT_EQUAL","DIRECTIONS","asc","desc","FirestoreQueryModifiers","_classCallCheck","_limit","undefined","_limitToLast","_filters","_orders","_type","_startAt","_startAfter","_endAt","_endBefore","hasInequality","hasNotEqual","hasArrayContains","hasArrayContainsAny","hasIn","hasNotIn","_createClass","key","value","_copy","newInstance","_toConsumableArray","get","map","f","_objectSpread","fieldPath","_toArray","options","limit","limitToLast","startAt","startAfter","endAt","endBefore","setFieldsCursor","cursor","fields","hasStart","hasEnd","asCollectionGroupQuery","isCollectionGroupQuery","isValidLimit","Math","floor","isValidLimitToLast","validatelimitToLast","length","Error","isValidOperator","operator","isEqualOperator","isNotEqualOperator","isInOperator","where","opStr","filter","concat","filterWhere","validateWhere","_filterCheck","filters","i","queries","_toPath","isValidDirection","directionStr","toLowerCase","orderBy","order","direction","validateOrderBy","_validateOrderByCheck","orders","$","set","Set","size","filterFieldPath","k","orderFieldPath","default"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreQueryModifiers.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNumber } from '@react-native-firebase/app/lib/common';\nimport FirestoreFieldPath, { DOCUMENT_ID } from './FirestoreFieldPath';\nimport { buildNativeArray, generateNativeData } from './utils/serialize';\n\nexport const OPERATORS = {\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '!=': 'NOT_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY',\n  'not-in': 'NOT_IN',\n  in: 'IN',\n};\n\nconst INEQUALITY = {\n  LESS_THAN: true,\n  LESS_THAN_OR_EQUAL: true,\n  GREATER_THAN: true,\n  GREATER_THAN_OR_EQUAL: true,\n  NOT_EQUAL: true,\n};\n\nconst DIRECTIONS = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING',\n};\n\nexport default class FirestoreQueryModifiers {\n  constructor() {\n    this._limit = undefined;\n    this._limitToLast = undefined;\n    this._filters = [];\n    this._orders = [];\n    this._type = 'collection';\n    // Cursors\n    this._startAt = undefined;\n    this._startAfter = undefined;\n    this._endAt = undefined;\n    this._endBefore = undefined;\n\n    // Pulled out of function to preserve their state\n    this.hasInequality = false;\n    this.hasNotEqual = false;\n    this.hasArrayContains = false;\n    this.hasArrayContainsAny = false;\n    this.hasIn = false;\n    this.hasNotIn = false;\n  }\n\n  _copy() {\n    const newInstance = new FirestoreQueryModifiers();\n    newInstance._limit = this._limit;\n    newInstance._limitToLast = this._limitToLast;\n    newInstance._filters = [...this._filters];\n    newInstance._orders = [...this._orders];\n    newInstance._type = this._type;\n    newInstance._startAt = this._startAt;\n    newInstance._startAfter = this._startAfter;\n    newInstance._endAt = this._endAt;\n    newInstance._endBefore = this._endBefore;\n    return newInstance;\n  }\n\n  get filters() {\n    return this._filters.map(f => ({\n      ...f,\n      fieldPath: f.fieldPath instanceof FirestoreFieldPath ? f.fieldPath._toArray() : f.fieldPath,\n    }));\n  }\n\n  get orders() {\n    return this._orders.map(f => ({\n      ...f,\n      fieldPath: f.fieldPath instanceof FirestoreFieldPath ? f.fieldPath._toArray() : f.fieldPath,\n    }));\n  }\n\n  get options() {\n    const options = {};\n\n    if (this._limit) {\n      options.limit = this._limit;\n    }\n\n    if (this._limitToLast) {\n      options.limitToLast = this._limitToLast;\n    }\n\n    if (this._startAt) {\n      options.startAt = this._startAt;\n    }\n    if (this._startAfter) {\n      options.startAfter = this._startAfter;\n    }\n    if (this._endAt) {\n      options.endAt = this._endAt;\n    }\n    if (this._endBefore) {\n      options.endBefore = this._endBefore;\n    }\n\n    return options;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  setFieldsCursor(cursor, fields) {\n    this[`_${cursor}`] = buildNativeArray(fields);\n    return this;\n  }\n\n  /**\n   * Options\n   */\n\n  hasStart() {\n    return !!(this._startAt || this._startAfter);\n  }\n\n  hasEnd() {\n    return !!(this._endAt || this._endBefore);\n  }\n\n  /**\n   * Collection Group Query\n   */\n\n  asCollectionGroupQuery() {\n    this._type = 'collectionGroup';\n    return this;\n  }\n\n  isCollectionGroupQuery() {\n    return this._type === 'collectionGroup';\n  }\n\n  /**\n   * Limit\n   */\n\n  isValidLimit(limit) {\n    return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n  }\n\n  limit(limit) {\n    this._limitToLast = undefined;\n    this._limit = limit;\n    return this;\n  }\n\n  /**\n   * limitToLast\n   */\n\n  isValidLimitToLast(limit) {\n    return !isNumber(limit) || Math.floor(limit) !== limit || limit <= 0;\n  }\n\n  validatelimitToLast() {\n    if (this._limitToLast) {\n      if (!this._orders.length) {\n        throw new Error(\n          'firebase.firestore().collection().limitToLast() queries require specifying at least one firebase.firestore().collection().orderBy() clause',\n        );\n      }\n    }\n  }\n\n  limitToLast(limitToLast) {\n    this._limit = undefined;\n    this._limitToLast = limitToLast;\n    return this;\n  }\n\n  /**\n   * Filters\n   */\n\n  isValidOperator(operator) {\n    return !!OPERATORS[operator];\n  }\n\n  isEqualOperator(operator) {\n    return OPERATORS[operator] === 'EQUAL';\n  }\n\n  isNotEqualOperator(operator) {\n    return OPERATORS[operator] === 'NOT_EQUAL';\n  }\n\n  isInOperator(operator) {\n    return (\n      OPERATORS[operator] === 'IN' ||\n      OPERATORS[operator] === 'ARRAY_CONTAINS_ANY' ||\n      OPERATORS[operator] === 'NOT_IN'\n    );\n  }\n\n  where(fieldPath, opStr, value) {\n    const filter = {\n      fieldPath,\n      operator: OPERATORS[opStr],\n      value: generateNativeData(value, true),\n    };\n\n    this._filters = this._filters.concat(filter);\n    return this;\n  }\n\n  filterWhere(filter) {\n    this._filters = this._filters.concat(filter);\n    return this;\n  }\n\n  validateWhere() {\n    if (this._filters.length > 0) {\n      this._filterCheck(this._filters);\n    }\n  }\n\n  _filterCheck(filters) {\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n\n      if (filter.queries) {\n        // Recursively check sub-queries for Filters\n        this._filterCheck(filter.queries);\n        // If it is a Filter query, skip the rest of the loop\n        continue;\n      }\n\n      // Skip if no inequality\n      if (!INEQUALITY[filter.operator]) {\n        continue;\n      }\n\n      if (filter.operator === OPERATORS['!=']) {\n        if (this.hasNotEqual) {\n          throw new Error(\"Invalid query. You cannot use more than one '!=' inequality filter.\");\n        }\n        //needs to set hasNotEqual = true  before setting first hasInequality = filter. It is used in a condition check later\n        this.hasNotEqual = true;\n      }\n\n      // Set the first inequality\n      if (!this.hasInequality) {\n        this.hasInequality = filter;\n        continue;\n      }\n\n      // Check the set value is the same as the new one\n      if (INEQUALITY[filter.operator] && this.hasInequality) {\n        if (this.hasInequality.fieldPath._toPath() !== filter.fieldPath._toPath()) {\n          throw new Error(\n            `Invalid query. All where filters with an inequality (<, <=, >, != or >=) must be on the same field. But you have inequality filters on '${this.hasInequality.fieldPath._toPath()}' and '${filter.fieldPath._toPath()}'`,\n          );\n        }\n      }\n    }\n\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n\n      if (filter.operator === OPERATORS['array-contains']) {\n        if (this.hasArrayContains) {\n          throw new Error('Invalid query. Queries only support a single array-contains filter.');\n        }\n        this.hasArrayContains = true;\n      }\n\n      if (filter.operator === OPERATORS['array-contains-any']) {\n        if (this.hasArrayContainsAny) {\n          throw new Error(\n            \"Invalid query. You cannot use more than one 'array-contains-any' filter.\",\n          );\n        }\n\n        if (this.hasNotIn) {\n          throw new Error(\n            \"Invalid query. You cannot use 'array-contains-any' filters with 'not-in' filters.\",\n          );\n        }\n\n        this.hasArrayContainsAny = true;\n      }\n\n      if (filter.operator === OPERATORS.in) {\n        if (this.hasNotIn) {\n          throw new Error(\"Invalid query. You cannot use 'in' filters with 'not-in' filters.\");\n        }\n\n        this.hasIn = true;\n      }\n\n      if (filter.operator === OPERATORS['not-in']) {\n        if (this.hasNotIn) {\n          throw new Error(\"Invalid query. You cannot use more than one 'not-in' filter.\");\n        }\n\n        if (this.hasNotEqual) {\n          throw new Error(\n            \"Invalid query. You cannot use 'not-in' filters with '!=' inequality filters\",\n          );\n        }\n\n        if (this.hasIn) {\n          throw new Error(\"Invalid query. You cannot use 'not-in' filters with 'in' filters.\");\n        }\n\n        if (this.hasArrayContainsAny) {\n          throw new Error(\n            \"Invalid query. You cannot use 'not-in' filters with 'array-contains-any' filters.\",\n          );\n        }\n\n        this.hasNotIn = true;\n      }\n    }\n  }\n\n  /**\n   * Orders\n   */\n\n  isValidDirection(directionStr) {\n    return !!DIRECTIONS[directionStr.toLowerCase()];\n  }\n\n  orderBy(fieldPath, directionStr) {\n    const order = {\n      fieldPath: fieldPath,\n      direction: directionStr ? DIRECTIONS[directionStr.toLowerCase()] : DIRECTIONS.asc,\n    };\n\n    this._orders = this._orders.concat(order);\n    return this;\n  }\n\n  validateOrderBy() {\n    this._validateOrderByCheck(this._filters);\n  }\n\n  _validateOrderByCheck(filters) {\n    // Ensure order hasn't been called on the same field\n    if (this._orders.length > 1) {\n      const orders = this._orders.map($ => $.fieldPath._toPath());\n      const set = new Set(orders);\n\n      if (set.size !== orders.length) {\n        throw new Error('Invalid query. Order by clause cannot contain duplicate fields.');\n      }\n    }\n\n    // Skip if no where filters\n    if (filters.length === 0) {\n      return;\n    }\n\n    // Ensure the first order field path is equal to the inequality filter field path\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n\n      if (filter.queries) {\n        // Recursively check sub-queries for Filters\n        this._validateOrderByCheck(filter.queries);\n        // If it is a Filter query, skip the rest of the loop\n        continue;\n      }\n      const filterFieldPath = filter.fieldPath._toPath();\n\n      for (let k = 0; k < this._orders.length; k++) {\n        const order = this._orders[k];\n        const orderFieldPath = order.fieldPath;\n        if (filter.operator === OPERATORS['==']) {\n          // Any where() fieldPath parameter cannot match any orderBy() parameter when '==' operand is invoked\n          if (filterFieldPath === orderFieldPath._toPath()) {\n            throw new Error(\n              `Invalid query. Query.orderBy() parameter: ${orderFieldPath} cannot be the same as your Query.where() fieldPath parameter: ${filterFieldPath}`,\n            );\n          }\n        }\n\n        if (filterFieldPath === DOCUMENT_ID._toPath() && orderFieldPath !== DOCUMENT_ID._toPath()) {\n          throw new Error(\n            \"Invalid query. Query.where() fieldPath parameter: 'FirestoreFieldPath' cannot be used in conjunction with a different Query.orderBy() parameter\",\n          );\n        }\n\n        if (INEQUALITY[filter.operator]) {\n          // Initial orderBy() parameter has to match every where() fieldPath parameter when inequality operator is invoked\n          if (filterFieldPath !== this._orders[0].fieldPath._toPath()) {\n            throw new Error(\n              `Invalid query. Initial Query.orderBy() parameter: ${orderFieldPath} has to be the same as the Query.where() fieldPath parameter(s): ${filterFieldPath} when an inequality operator is invoked `,\n            );\n          }\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}