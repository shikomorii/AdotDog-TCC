{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isString } from '@react-native-firebase/app/lib/common';\nvar RESERVED = new RegExp('[~*/\\\\[\\\\]]');\nvar FirestoreFieldPath = function () {\n  function FirestoreFieldPath() {\n    _classCallCheck(this, FirestoreFieldPath);\n    for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n      segments[_key] = arguments[_key];\n    }\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\"firebase.firestore.FieldPath invalid segment at index \" + i + \", expected a non-empty string.\");\n      }\n    }\n    this._segments = segments;\n  }\n  _createClass(FirestoreFieldPath, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\");\n      }\n      return this._toPath() === other._toPath();\n    }\n  }, {\n    key: \"_toPath\",\n    value: function _toPath() {\n      return this._segments.join('.');\n    }\n  }, {\n    key: \"_toArray\",\n    value: function _toArray() {\n      return this._segments;\n    }\n  }], [{\n    key: \"documentId\",\n    value: function documentId() {\n      return DOCUMENT_ID;\n    }\n  }]);\n  return FirestoreFieldPath;\n}();\nexport { FirestoreFieldPath as default };\nexport var DOCUMENT_ID = new FirestoreFieldPath('__name__');\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\");\n  }\n  var found = path.search(RESERVED);\n  if (found > 0) {\n    throw new Error(\"Invalid field path (\" + path + \"). Paths must not contain '~', '*', '/', '[', or ']'.\");\n  }\n  return _construct(FirestoreFieldPath, _toConsumableArray(path.split('.')));\n}","map":{"version":3,"names":["isString","RESERVED","RegExp","FirestoreFieldPath","_classCallCheck","_len","arguments","length","segments","Array","_key","Error","i","segment","_segments","_createClass","key","value","isEqual","other","_toPath","join","_toArray","documentId","DOCUMENT_ID","default","fromDotSeparatedString","path","startsWith","endsWith","indexOf","found","search","_construct","_toConsumableArray","split"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldPath.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\n\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\n          `firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`,\n        );\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\",\n      );\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n}\n\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\n\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\n      \"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\",\n    );\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\n      `Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`,\n    );\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}\n"],"mappings":";;;;AAiBA,SAASA,QAAQ,QAAQ,uCAAuC;AAEhE,IAAMC,QAAQ,GAAG,IAAIC,MAAM,CAAC,aAAa,CAAC;AAAC,IAEtBC,kBAAkB;EAKrC,SAAAA,mBAAA,EAAyB;IAAAC,eAAA,OAAAD,kBAAA;IAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAVC,QAAQ,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAARF,QAAQ,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACrB,IAAIF,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,IAAII,KAAK,CAAC,2EAA2E,CAAC;IAC9F;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACD,MAAM,EAAEK,CAAC,EAAE,EAAE;MACxC,IAAMC,OAAO,GAAGL,QAAQ,CAACI,CAAC,CAAC;MAC3B,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAAC,IAAIA,OAAO,KAAK,EAAE,EAAE;QACxC,MAAM,IAAIF,KAAK,4DAC4CC,CAAC,mCAC5D,CAAC;MACH;IACF;IAEA,IAAI,CAACE,SAAS,GAAGN,QAAQ;EAC3B;EAACO,YAAA,CAAAZ,kBAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAC,QAAQC,KAAK,EAAE;MACb,IAAI,EAAEA,KAAK,YAAYhB,kBAAkB,CAAC,EAAE;QAC1C,MAAM,IAAIQ,KAAK,CACb,iFACF,CAAC;MACH;MAEA,OAAO,IAAI,CAACS,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACC,OAAO,CAAC,CAAC;IAC3C;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAG,QAAA,EAAU;MACR,OAAO,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC;IACjC;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAK,SAAA,EAAW;MACT,OAAO,IAAI,CAACR,SAAS;IACvB;EAAC;IAAAE,GAAA;IAAAC,KAAA,EArCD,SAAAM,WAAA,EAAoB;MAClB,OAAOC,WAAW;IACpB;EAAC;EAAA,OAAArB,kBAAA;AAAA;AAAA,SAHkBA,kBAAkB,IAAAsB,OAAA;AAyCvC,OAAO,IAAMD,WAAW,GAAG,IAAIrB,kBAAkB,CAAC,UAAU,CAAC;AAE7D,OAAO,SAASuB,sBAAsBA,CAACC,IAAI,EAAE;EAC3C,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACvF,MAAM,IAAInB,KAAK,CACb,6FACF,CAAC;EACH;EAEA,IAAMoB,KAAK,GAAGJ,IAAI,CAACK,MAAM,CAAC/B,QAAQ,CAAC;EAEnC,IAAI8B,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAIpB,KAAK,0BACUgB,IAAI,0DAC7B,CAAC;EACH;EAEA,OAAAM,UAAA,CAAW9B,kBAAkB,EAAA+B,kBAAA,CAAIP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}