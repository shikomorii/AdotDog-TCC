{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from \"./FirestoreDocumentReference\";\nimport { parseSetOptions, parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\nvar FirestoreWriteBatch = function () {\n  function FirestoreWriteBatch(firestore) {\n    _classCallCheck(this, FirestoreWriteBatch);\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n  _createClass(FirestoreWriteBatch, [{\n    key: \"_verifyNotCommitted\",\n    value: function _verifyNotCommitted(method) {\n      if (this._committed) {\n        throw new Error(\"firebase.firestore.batch().\" + method + \"(*) A write batch can no longer be used after commit() has been called.\");\n      }\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      this._verifyNotCommitted('commit');\n      this._committed = true;\n      if (this._writes.length === 0) {\n        return Promise.resolve();\n      }\n      return this._firestore.native.documentBatch(this._writes);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      this._verifyNotCommitted('delete');\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'DELETE'\n      });\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._verifyNotCommitted('set');\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      if (!isObject(data)) {\n        throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n      }\n      var setOptions;\n      try {\n        setOptions = parseSetOptions(options);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().doc().set(_, *) \" + e.message + \".\");\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'SET',\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n        options: setOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      this._verifyNotCommitted('update');\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      if (args.length === 0) {\n        throw new Error('firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.');\n      }\n      var data;\n      try {\n        data = parseUpdateArgs(args);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().batch().update(_, *) \" + e.message);\n      }\n      this._writes.push({\n        path: documentRef.path,\n        type: 'UPDATE',\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n      });\n      return this;\n    }\n  }]);\n  return FirestoreWriteBatch;\n}();\nexport { FirestoreWriteBatch as default };","map":{"version":3,"names":["isObject","FirestoreDocumentReference","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreWriteBatch","firestore","_classCallCheck","_firestore","_writes","_committed","_createClass","key","value","_verifyNotCommitted","method","Error","commit","length","Promise","resolve","native","documentBatch","_delete","documentRef","app","push","path","type","set","data","options","setOptions","e","message","_settings","ignoreUndefinedProperties","update","_len","arguments","args","Array","_key","default"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreWriteBatch.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreWriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n\n  _verifyNotCommitted(method) {\n    if (this._committed) {\n      throw new Error(\n        `firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`,\n      );\n    }\n  }\n\n  commit() {\n    this._verifyNotCommitted('commit');\n    this._committed = true;\n    if (this._writes.length === 0) {\n      return Promise.resolve();\n    }\n    return this._firestore.native.documentBatch(this._writes);\n  }\n\n  delete(documentRef) {\n    this._verifyNotCommitted('delete');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'DELETE',\n    });\n\n    return this;\n  }\n\n  set(documentRef, data, options) {\n    this._verifyNotCommitted('set');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'SET',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    this._verifyNotCommitted('update');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'UPDATE',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}