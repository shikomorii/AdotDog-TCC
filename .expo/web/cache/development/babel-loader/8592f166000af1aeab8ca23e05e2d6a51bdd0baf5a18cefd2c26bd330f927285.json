{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\nvar MIN_SECONDS = -62135596800;\nvar FirestoreTimestamp = function () {\n  function FirestoreTimestamp(seconds, nanoseconds) {\n    _classCallCheck(this, FirestoreTimestamp);\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n    if (nanoseconds < 0) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n    if (seconds >= 253402300800) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n  _createClass(FirestoreTimestamp, [{\n    key: \"seconds\",\n    get: function get() {\n      return this._seconds;\n    }\n  }, {\n    key: \"nanoseconds\",\n    get: function get() {\n      return this._nanoseconds;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreTimestamp)) {\n        throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");\n      }\n      return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n    }\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return this._seconds * 1000 + this._nanoseconds / 1e6;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"FirestoreTimestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        seconds: this.seconds,\n        nanoseconds: this.nanoseconds\n      };\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      var adjustedSeconds = this.seconds - MIN_SECONDS;\n      var formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n      var formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n      return formattedSeconds + '.' + formattedNanoseconds;\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return FirestoreTimestamp.fromMillis(Date.now());\n    }\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(date) {\n      if (!isDate(date)) {\n        throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");\n      }\n      return FirestoreTimestamp.fromMillis(date.getTime());\n    }\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(milliseconds) {\n      var seconds = Math.floor(milliseconds / 1000);\n      var nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n      return new FirestoreTimestamp(seconds, nanoseconds);\n    }\n  }]);\n  return FirestoreTimestamp;\n}();\nexport { FirestoreTimestamp as default };","map":{"version":3,"names":["isDate","isNumber","MIN_SECONDS","FirestoreTimestamp","seconds","nanoseconds","_classCallCheck","Error","_seconds","_nanoseconds","_createClass","key","get","value","isEqual","other","toDate","Date","toMillis","toString","toJSON","valueOf","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds","now","fromMillis","fromDate","date","getTime","milliseconds","Math","floor","default"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n"],"mappings":";;AAiBA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,uCAAuC;AAGxE,IAAMC,WAAW,GAAG,CAAC,WAAW;AAAC,IAEZC,kBAAkB;EAqBrC,SAAAA,mBAAYC,OAAO,EAAEC,WAAW,EAAE;IAAAC,eAAA,OAAAH,kBAAA;IAChC,IAAI,CAACF,QAAQ,CAACG,OAAO,CAAC,EAAE;MACtB,MAAM,IAAIG,KAAK,CAAC,iEAAiE,CAAC;IACpF;IAEA,IAAI,CAACN,QAAQ,CAACI,WAAW,CAAC,EAAE;MAC1B,MAAM,IAAIE,KAAK,CAAC,qEAAqE,CAAC;IACxF;IAEA,IAAIF,WAAW,GAAG,CAAC,EAAE;MACnB,MAAM,IAAIE,KAAK,+DAA6DF,WAAa,CAAC;IAC5F;IAEA,IAAIA,WAAW,IAAI,GAAG,EAAE;MACtB,MAAM,IAAIE,KAAK,+DAA6DF,WAAa,CAAC;IAC5F;IAGA,IAAID,OAAO,GAAGF,WAAW,EAAE;MACzB,MAAM,IAAIK,KAAK,2DAAyDH,OAAS,CAAC;IACpF;IAGA,IAAIA,OAAO,IAAI,YAAY,EAAE;MAC3B,MAAM,IAAIG,KAAK,2DAAyDH,OAAS,CAAC;IACpF;IAEA,IAAI,CAACI,QAAQ,GAAGJ,OAAO;IACvB,IAAI,CAACK,YAAY,GAAGJ,WAAW;EACjC;EAACK,YAAA,CAAAP,kBAAA;IAAAQ,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAc;MACZ,OAAO,IAAI,CAACJ,QAAQ;IACtB;EAAC;IAAAG,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAkB;MAChB,OAAO,IAAI,CAACH,YAAY;IAC1B;EAAC;IAAAE,GAAA;IAAAE,KAAA,EAED,SAAAC,QAAQC,KAAK,EAAE;MACb,IAAI,EAAEA,KAAK,YAAYZ,kBAAkB,CAAC,EAAE;QAC1C,MAAMI,KAAK,CACT,oFACF,CAAC;MACH;MAEA,OAAOQ,KAAK,CAACX,OAAO,KAAK,IAAI,CAACI,QAAQ,IAAIO,KAAK,CAACV,WAAW,KAAK,IAAI,CAACI,YAAY;IACnF;EAAC;IAAAE,GAAA;IAAAE,KAAA,EAED,SAAAG,OAAA,EAAS;MACP,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAClC;EAAC;IAAAP,GAAA;IAAAE,KAAA,EAED,SAAAK,SAAA,EAAW;MACT,OAAO,IAAI,CAACV,QAAQ,GAAG,IAAI,GAAG,IAAI,CAACC,YAAY,GAAG,GAAG;IACvD;EAAC;IAAAE,GAAA;IAAAE,KAAA,EAED,SAAAM,SAAA,EAAW;MACT,uCAAqC,IAAI,CAACf,OAAO,sBAAiB,IAAI,CAACC,WAAW;IACpF;EAAC;IAAAM,GAAA;IAAAE,KAAA,EAED,SAAAO,OAAA,EAAS;MACP,OAAO;QAAEhB,OAAO,EAAE,IAAI,CAACA,OAAO;QAAEC,WAAW,EAAE,IAAI,CAACA;MAAY,CAAC;IACjE;EAAC;IAAAM,GAAA;IAAAE,KAAA,EAMD,SAAAQ,QAAA,EAAU;MAOR,IAAMC,eAAe,GAAG,IAAI,CAAClB,OAAO,GAAGF,WAAW;MAElD,IAAMqB,gBAAgB,GAAGC,MAAM,CAACF,eAAe,CAAC,CAACG,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;MAClE,IAAMC,oBAAoB,GAAGF,MAAM,CAAC,IAAI,CAACnB,WAAW,CAAC,CAACoB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACtE,OAAOF,gBAAgB,GAAG,GAAG,GAAGG,oBAAoB;IACtD;EAAC;IAAAf,GAAA;IAAAE,KAAA,EArGD,SAAAc,IAAA,EAAa;MACX,OAAOxB,kBAAkB,CAACyB,UAAU,CAACX,IAAI,CAACU,GAAG,CAAC,CAAC,CAAC;IAClD;EAAC;IAAAhB,GAAA;IAAAE,KAAA,EAED,SAAAgB,SAAgBC,IAAI,EAAE;MACpB,IAAI,CAAC9B,MAAM,CAAC8B,IAAI,CAAC,EAAE;QACjB,MAAM,IAAIvB,KAAK,CACb,+EACF,CAAC;MACH;MAEA,OAAOJ,kBAAkB,CAACyB,UAAU,CAACE,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IACtD;EAAC;IAAApB,GAAA;IAAAE,KAAA,EAED,SAAAe,WAAkBI,YAAY,EAAE;MAC9B,IAAM5B,OAAO,GAAG6B,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,IAAI,CAAC;MAC/C,IAAM3B,WAAW,GAAG,CAAC2B,YAAY,GAAG5B,OAAO,GAAG,IAAI,IAAI,GAAG;MACzD,OAAO,IAAID,kBAAkB,CAACC,OAAO,EAAEC,WAAW,CAAC;IACrD;EAAC;EAAA,OAAAF,kBAAA;AAAA;AAAA,SAnBkBA,kBAAkB,IAAAgC,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}