{"ast":null,"code":"import binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from \"./promise\";\nvar CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfunction btoa(input) {\n  var map;\n  var i = 0;\n  var block = 0;\n  var output = '';\n  for (block = 0, i = 0, map = CHARS; input.charAt(i | 0) || (map = '=', i % 1); output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n    var charCode = input.charCodeAt(i += 3 / 4);\n    if (charCode > 0xff) {\n      throw new Error(\"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\nfunction atob(input) {\n  var i = 0;\n  var bc = 0;\n  var bs = 0;\n  var buffer;\n  var output = '';\n  var str = input.replace(/[=]+$/, '');\n  if (str.length % 4 === 1) {\n    throw new Error(\"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (bc = 0, bs = 0, i = 0; buffer = str.charAt(i++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    buffer = CHARS.indexOf(buffer);\n  }\n  return output;\n}\nfunction fromData(data) {\n  if (data instanceof Blob) {\n    var fileReader = new FileReader();\n    var _promiseDefer = promiseDefer(),\n      resolve = _promiseDefer.resolve,\n      reject = _promiseDefer.reject,\n      promise = _promiseDefer.promise;\n    fileReader.readAsDataURL(data);\n    fileReader.onloadend = function onloadend() {\n      resolve({\n        string: fileReader.result,\n        format: 'data_url'\n      });\n    };\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n    return promise;\n  }\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64'\n    });\n  }\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\nexport default {\n  btoa: btoa,\n  atob: atob,\n  fromData: fromData\n};","map":{"version":3,"names":["binaryToBase64","promiseDefer","CHARS","btoa","input","map","i","block","output","charAt","charCode","charCodeAt","Error","atob","bc","bs","buffer","str","replace","length","String","fromCharCode","indexOf","fromData","data","Blob","fileReader","FileReader","_promiseDefer","resolve","reject","promise","readAsDataURL","onloadend","string","result","format","onerror","event","abort","ArrayBuffer","Uint8Array","Promise"],"sources":["C:/Users/filipe.225221/Downloads/projeto-mari (1)/projeto-mari/adotdogggg/node_modules/@react-native-firebase/app/lib/common/Base64.js"],"sourcesContent":["/* eslint-disable no-bitwise */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport binaryToBase64 from 'react-native/Libraries/Utilities/binaryToBase64';\nimport { promiseDefer } from './promise';\n\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/**\n * window.btoa\n */\nfunction btoa(input) {\n  let map;\n  let i = 0;\n  let block = 0;\n  let output = '';\n\n  for (\n    block = 0, i = 0, map = CHARS;\n    input.charAt(i | 0) || ((map = '='), i % 1);\n    output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\n  ) {\n    const charCode = input.charCodeAt((i += 3 / 4));\n\n    if (charCode > 0xff) {\n      throw new Error(\n        \"'RNFirebase.Base64.btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\",\n      );\n    }\n\n    block = (block << 8) | charCode;\n  }\n\n  return output;\n}\n\n/**\n * window.atob\n */\nfunction atob(input) {\n  let i = 0;\n  let bc = 0;\n  let bs = 0;\n  let buffer;\n  let output = '';\n\n  const str = input.replace(/[=]+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\n      \"'RNFirebase.Base64.atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n\n  for (\n    bc = 0, bs = 0, i = 0;\n    (buffer = str.charAt(i++));\n    ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    buffer = CHARS.indexOf(buffer);\n  }\n\n  return output;\n}\n\n/**\n * Converts a Blob, ArrayBuffer or Uint8Array to a base64 string.\n */\nfunction fromData(data) {\n  if (data instanceof Blob) {\n    const fileReader = new FileReader();\n    const { resolve, reject, promise } = promiseDefer();\n\n    fileReader.readAsDataURL(data);\n\n    fileReader.onloadend = function onloadend() {\n      resolve({ string: fileReader.result, format: 'data_url' });\n    };\n\n    fileReader.onerror = function onerror(event) {\n      fileReader.abort();\n      reject(event);\n    };\n\n    return promise;\n  }\n\n  if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n    return Promise.resolve({\n      string: binaryToBase64(data),\n      format: 'base64',\n    });\n  }\n\n  throw new Error(\"'RNFirebase.Base64.fromData' failed: Unknown data type.\");\n}\n\nexport default {\n  btoa,\n  atob,\n  fromData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}